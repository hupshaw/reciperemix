{"version":3,"sources":["app.js","api.js","instructions.js","index.js"],"names":["meals","Mealfill","map","meal","Selection","props","state","type","placeholder","onKeyDown","React","Component","axios","create","baseURL","Instructions","data","API","post","food","response","responseData","recipe","join","replace","this","setState","instructionList","split","instruction","generate","formatInstructions","dish","flavor","MixItUp","ReactDOM","render","document","getElementById","onClick","generateRecipe"],"mappings":"mPAEMA,G,MAAQ,CAAC,mBAAoB,YAAa,QAAS,SAAU,UAAW,UAE9E,SAASC,IACP,OACE,gCACCD,EAAME,KAAI,SAAAC,GAAI,OACb,gCACGA,O,IA0BMC,E,kDAjBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,KAAM,WAFH,E,qDAKf,OACA,8BACE,iDACA,kBAACN,EAAD,MACA,qCACA,2BAAOM,KAAK,OAAOC,YAAY,mCAAmCC,UAAU,yB,GAX5DC,IAAMC,W,gCCPfC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,+BCyCIC,E,kDA9Cb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEU,KAAM,IAFJ,E,kMAQMC,EAAIC,KAAK,qBAAsB,CACpDC,KAAM,Y,OADFC,E,OAGFC,EAAeD,EAASJ,KAAKM,OAAOC,KAAK,KAC5CC,QAAQ,IAAK,IACbA,QAAQ,KAAM,IACdA,QAAQ,KAAM,IACdA,QAAQ,KAAM,IAEfC,KAAKC,SAAS,CAAEV,KAAMK,I,iJAMtB,IACMM,EADe,iCACgBC,MAAM,KAE3C,OACE,4BACCD,EAAgBzB,KAAI,SAAA2B,GAAW,OAC9B,4BACGA,S,+BASP,OAAyB,IAAtBJ,KAAKpB,MAAMyB,SACHL,KAAKnB,MAAMU,KAEXS,KAAKM,yB,GA7COrB,IAAMC,WCG3BQ,EAAO,CACXa,KAAM,UACNC,OAAQ,SAKJC,E,+KAGFC,IAASC,OAAO,kBAAC,EAAD,CAAcN,UALlB,IAKwCO,SAASC,eAAe,mB,+BAI5E,OACE,4BAAQ/B,KAAK,SAASgC,QAASd,KAAKe,gBAApC,kB,GARgB9B,IAAMC,WAe5BwB,IAASC,OAAO,kBAAC,EAAD,CAAWd,OAAQH,IAASkB,SAASC,eAAe,cACpEH,IAASC,OAAO,kBAAC,EAAD,CAAcN,UAjBb,IAiBoCO,SAASC,eAAe,iBAC7EH,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,YAEtCnB,c","file":"static/js/main.5fd35343.chunk.js","sourcesContent":["import React from 'react';\n\nconst meals = ['insert meal here', 'breakfast', 'lunch', 'dinner', 'dessert', 'snack'];\n\nfunction Mealfill() {\n  return (\n    <select>\n    {meals.map(meal => (\n      <option>\n        {meal}\n      </option>\n    ))}\n    </select>\n  );\n}\n\n\nclass Selection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {type: \"dessert\"}\n  }\n  render() {\n      return (\n      <form>\n        <p>I'm looking for a </p>\n        <Mealfill />\n        <p> with </p>\n        <input type=\"text\" placeholder=\"ingredients, separated by commas\" onKeyDown=\"addIngredient()\"/>\n      </form>\n    )\n  }\n};\n\n\nexport default Selection ;\n","/*\n  api.js saves the url in axios for our backend server,\n  and exports it to be used by instructions.js\n  Confused about axios? Check this out:\n  https://www.digitalocean.com/community/tutorials/react-axios-react\n  */\n\nimport axios from 'axios';\n\n\nexport default axios.create({\n  baseURL: 'http://73.131.137.22:3000/'\n});\n","import React from 'react';\nimport API from './api.js';\n\nclass Instructions extends React.Component {\n\n\n  constructor(props) {\n    super(props);\n    this.state = { data: [] };\n  }\n\n  //forces the page to load from the API before rendering\n  //assigns backend response to this.state\n  async componentDidMount() {\n    const response = await API.post('api/recipe/michael', {\n      food: 'oranges'\n    });\n    var responseData = response.data.recipe.join(' ')\n    .replace('[', '')\n    .replace(/'/g, '')\n    .replace(/,/g, '')\n    .replace(/]/g, '');\n    //alert(typeof(responseData));\n    this.setState({ data: responseData });\n  }\n\n\n  //TODO: Format this.state.data in this function\n  formatInstructions() {\n    const instructions = \"preheat oven, mix dough, serve\";\n    const instructionList = instructions.split(\",\");\n\n    return (\n      <ol>\n      {instructionList.map(instruction => (\n        <li>\n          {instruction}\n          </li>\n        ))}\n    </ol>\n    )\n  };\n\n  render() {\n    //Use this.state.data when the model is running\n    if(this.props.generate===true)\n      return ( this.state.data );\n    else\n      return ( this.formatInstructions() );\n  }\n}\n\nexport default Instructions;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Selection from './app.js';\nimport Instructions from './instructions.js';\n\nconst food = {\n  dish: \"pavlova\",\n  flavor: \"sweet\"\n}\n\nconst genTrue = true;\nconst genFalse = false;\nclass MixItUp extends React.Component {\n\n  generateRecipe() {\n    ReactDOM.render(<Instructions generate={genTrue}/>, document.getElementById('instructions'));\n  }\n\n  render() {\n    return (\n      <button type=\"button\" onClick={this.generateRecipe}>\n        Mix it up!\n      </button>\n    )\n  }\n}\n\nReactDOM.render(<Selection recipe={food}/>, document.getElementById('customize'));\nReactDOM.render(<Instructions generate={genFalse}/>, document.getElementById('instructions'));\nReactDOM.render(<MixItUp />, document.getElementById('mixitup'));\n\nexport default food;\n"],"sourceRoot":""}